/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package engarde.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;

/**
 *
 * @author ktaji
 */
public class GraphPanel extends javax.swing.JPanel {

    public static double[] samplevalues = {0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.205,0.206665702,0.210155891,0.217667531,0.218865076,0.22591243,0.226267013,0.230138361,0.239522669,0.241778035,0.251359708,0.257138023,0.262589311,0.2668951,0.271630147,0.271709832,0.272207472};
    
    public static double MAXVALUE = 1.0;
    public static double MINVALUE = 0.0;
    public static double SCALE_Y = 0.1;
    private static final int maxLengthOfGraph = 20;
    
    private ArrayList<ArrayList<Double>> printData;
    private ArrayList<Color> printColor;
//    private int maxlengthofdata = 0;
    private String typeString = "";
    /**
     * Creates new form GraphPanel
     */
    public GraphPanel() {
        this.printData = new ArrayList<>();
        this.printColor = new ArrayList<>();
        initComponents();
    }

    public void setText(String t){
        this.typeString = t;
    }
    public void resetGraph(){
        this.printData = new ArrayList<>();
        this.printColor = new ArrayList<>();
        //this.maxlengthofdata = 0;        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(400, 200));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 189, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void addData(ArrayList<Double> data,Color color){
        if(data.size() <= 0) return;
        
        if(data.size() > maxLengthOfGraph){
            int maxindex = data.size();
            int minindex = maxindex - maxLengthOfGraph;

            List<Double> list = data.subList(minindex, maxindex);
            ArrayList<Double> alist = new ArrayList<>();
            for(Double d:list){
                alist.add(d);
            }
            this.printData.add(alist);
        } else {
            this.printData.add(data);
        }
        this.printColor.add(color);
//        if(this.maxlengthofdata < data.size()){
//            this.maxlengthofdata = data.size();
//        }
        this.validate();
        this.repaint();
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        int width = this.getWidth();
        int height = this.getHeight();


        g.setColor(Color.white);
        g.fillRect(0,0, width, height);

        Font basefont = g.getFont();
        g.setColor(Color.gray);
        g.setFont(new Font("Arial", Font.BOLD, height/4));
        g.drawString(this.typeString, width/2-height/8, height/2);

        g.setColor(Color.black);
        g.drawRect(10, 10, width-20, height-20);
        g.setColor(Color.gray);
        int scaleY_view = (height-20)/ 10;
        for(int i=1;i<10;i++){
            g.drawLine(10, 10+scaleY_view*i, width-10, 10+scaleY_view*i);
            
        }
        for(int i=0;i<this.printData.size();i++){
            ArrayList<Double> data = this.printData.get(i);
            Color col_graph = this.printColor.get(i);
            g.setColor(col_graph);
            if(!data.isEmpty()){
                int scaleX_view = (width-20)/this.maxLengthOfGraph;
                int first_y = calulateY(data.get(0),height-10,10);
                int first_x = 10;
                for(double d:data){
                    int y = calulateY(d,height-10,10);
                    g.drawLine(first_x, first_y, first_x+scaleX_view, y);
                    first_y = y;
                    first_x = first_x+scaleX_view;
                }
            }
        }
        
        
    }

    public static int calulateY(double value,int pointof0, int pointof1){
        if(pointof1<pointof0){
            //下が0のグラフ
            int height = pointof0-pointof1;
            int dy = (int)(height * value);
            return pointof0 - dy;
        } else {
            //上が0のグラフ
            int height = pointof1-pointof0;
            int dy = (int)(height * value);
            return pointof0 + dy;
        }
    }
    
    
    public static void main(String[] args){
        System.out.println("this is the test method of drawing.");
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GraphPanel gp = new GraphPanel();
        frame.getContentPane().add(gp);
        frame.pack();
        ArrayList<Double> list = new ArrayList<>();
        for(double v:samplevalues){
            list.add(v);
        }
        gp.addData(list,Color.red);
        frame.setVisible(true);
               

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
